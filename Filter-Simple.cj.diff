--- lib/Filter/Simple.pm_orig	Fri Nov 23 20:48:49 2001
+++ lib/Filter/Simple.pm	Wed Apr 10 04:11:55 2002
@@ -4,7 +4,7 @@
 
 use vars qw{ $VERSION @EXPORT };
 
-$VERSION = '0.77';
+$VERSION = '0.77.hackedbycj2';
 
 use Filter::Util::Call;
 use Carp;
@@ -53,6 +53,8 @@
 	string     => [ $ws,  $pod_or_DATA, $id, $exql                   ],
 	code       => [ $ws, { DONT_MATCH => $pod_or_DATA },
 			$id, { DONT_MATCH => \&extract_quotelike }       ],
+        codecj     => [ $ws, { DONT_MATCH => $pod_or_DATA },
+                        $id, { DONT_MATCH => \&extract_quotelike }       ],
 	executable => [ $ws, { DONT_MATCH => $pod_or_DATA }              ],
 	all	   => [            { MATCH      => qr/(?s:.*)/         } ],
 );
@@ -94,6 +96,15 @@
 			  },
 );
 
+# Hacked by pflanze@gmx.ch on Sun, 31 Mar 2002 17:58:27 +0200 and Wed, 10 Apr 2002 04:07:33 +0200
+# added codecj handler which:
+# Changed marker format from $;ZZZZ$; to $;ZZZZNN$;, where
+# ZZZZ= counter,
+# NN= number of newlines in the replaced part
+# (maybe at some time it would also be a good idea to include a
+#  T= type of replacement (pod, string, regex, ...)
+# )
+# codecj also strips #comment\n parts
 
 sub gen_std_filter_for {
 	my ($type, $transform) = @_;
@@ -114,6 +125,18 @@
 		        $transform->(@_);
 			s/$extractor/${$pieces[unpack('N',$1)]}/g;
 		     }
+                     elsif ($type eq 'codecj') {
+                        my $count = 0;
+						local $placeholder = qr/\Q$;\E(?:\C{4}\C{2})\Q$;\E/;
+                        my $extractor = qr/\Q$;\E(\C{4})\C{2}\Q$;\E/;
+                        $_ = join "",
+                                  map { ref $_ ? $;.pack('N',$count++)."".pack('n',$$_=~ tr/\n/\n/).$; 
+								  		: do { s/#.*//mg; $_ } } ##cj ç make a copy?
+                                      @pieces;
+                        @pieces = grep { ref $_ } @pieces;
+                        $transform->(@_);
+                        s/$extractor/${$pieces[unpack('N',$1)]}/g;
+                     }
 		     else {
 		        my $selector = $selector_for{$type}->($transform);
 		        $_ = join "", map $selector->(@_), @pieces;
